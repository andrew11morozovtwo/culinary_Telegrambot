import logging
import requests
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from config import BOT_TOKEN, LOG_LEVEL, LOG_FORMAT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format=LOG_FORMAT,
    level=getattr(logging, LOG_LEVEL)
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    conn = sqlite3.connect('recipes.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='favorite_recipes'")
    table_exists = cursor.fetchone()
    
    if not table_exists:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É —Å –ø–æ–ª–µ–º rating
        cursor.execute('''
            CREATE TABLE favorite_recipes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                recipe_id TEXT NOT NULL,
                recipe_name TEXT NOT NULL,
                recipe_image TEXT,
                recipe_instructions TEXT,
                rating INTEGER DEFAULT 0,
                added_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(user_id, recipe_id)
            )
        ''')
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ rating –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
        cursor.execute("PRAGMA table_info(favorite_recipes)")
        columns = [column[1] for column in cursor.fetchall()]
        
        if 'rating' not in columns:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ rating –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
            cursor.execute('ALTER TABLE favorite_recipes ADD COLUMN rating INTEGER DEFAULT 0')
    
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤", callback_data="search_recipes")],
        [InlineKeyboardButton("‚ù§Ô∏è –ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data="my_favorites")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        "üç≥ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ë–æ—Ç!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test
async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    await update.message.reply_text(
        "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!\n\n"
        "üîÑ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã:\n"
        "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n"
        "‚Ä¢ –ö–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç\n"
        "‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
        "‚Ä¢ API —Ä–µ—Ü–µ–ø—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
        "üéâ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "search_recipes":
        await show_search_menu(query)
    elif query.data == "my_favorites":
        await show_favorites(query)
    elif query.data == "back_to_main":
        await show_main_menu(query)
    elif query.data == "random_recipe":
        await show_random_recipe(query)
    elif query.data == "search_by_name":
        await show_search_by_name_prompt(query)
    elif query.data == "search_by_category":
        await show_categories_menu(query)
    elif query.data.startswith("add_favorite_"):
        await add_to_favorites(query)
    elif query.data.startswith("remove_favorite_"):
        await remove_from_favorites(query)
    elif query.data.startswith("view_recipe_"):
        await show_recipe_details(query)
    elif query.data.startswith("category_"):
        await show_recipes_by_category(query)
    elif query.data.startswith("select_recipe_"):
        recipe_id = query.data.replace("select_recipe_", "")
        await show_recipe_details_by_id(query, recipe_id)
    elif query.data.startswith("rate_recipe_"):
        await show_rating_menu(query)
    elif query.data.startswith("set_rating_"):
        await set_recipe_rating(query)

async def show_search_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤"""
    keyboard = [
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç", callback_data="random_recipe")],
        [InlineKeyboardButton("üìù –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="search_by_name")],
        [InlineKeyboardButton("üìÇ –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="search_by_category")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üîç **–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_favorites(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ –ë–î, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (—É–±—ã–≤–∞–Ω–∏–µ)
    conn = sqlite3.connect('recipes.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT recipe_id, recipe_name, recipe_image, rating
        FROM favorite_recipes 
        WHERE user_id = ? 
        ORDER BY rating DESC, added_date DESC
    ''', (user_id,))
    favorites = cursor.fetchall()
    conn.close()
    
    if not favorites:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚ù§Ô∏è **–ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã**\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤.\n"
            "–ù–∞–π–¥–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    text = "‚ù§Ô∏è **–ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:**\n\n"
    keyboard = []
    
    for i, (recipe_id, recipe_name, recipe_image, rating) in enumerate(favorites[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ—Ü–µ–ø—Ç–∞–º–∏
        stars = "‚≠ê" * rating if rating > 0 else "‚ùå –ù–µ—Ç –æ—Ü–µ–Ω–∫–∏"
        text += f"{i+1}. {recipe_name}\n"
        text += f"   {stars}\n\n"
        keyboard.append([InlineKeyboardButton(f"üëÅÔ∏è {recipe_name[:20]}...", callback_data=f"view_recipe_{recipe_id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_main_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤", callback_data="search_recipes")],
        [InlineKeyboardButton("‚ù§Ô∏è –ú–æ–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data="my_favorites")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üç≥ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def add_to_favorites(query):
    """–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    recipe_id = query.data.replace("add_favorite_", "")
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ API
    try:
        response = requests.get(f"https://www.themealdb.com/api/json/v1/1/lookup.php?i={recipe_id}")
        recipe_data = response.json()
        
        if recipe_data['meals']:
            recipe = recipe_data['meals'][0]
            recipe_name = recipe['strMeal']
            recipe_image = recipe['strMealThumb']
            recipe_instructions = recipe['strInstructions']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            conn = sqlite3.connect('recipes.db')
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR IGNORE INTO favorite_recipes 
                (user_id, recipe_id, recipe_name, recipe_image, recipe_instructions)
                VALUES (?, ?, ?, ?, ?)
            ''', (user_id, recipe_id, recipe_name, recipe_image, recipe_instructions))
            conn.commit()
            conn.close()
            
            await query.answer("‚úÖ –†–µ—Ü–µ–ø—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
        else:
            await query.answer("‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")

async def remove_from_favorites(query):
    """–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    recipe_id = query.data.replace("remove_favorite_", "")
    user_id = query.from_user.id
    
    conn = sqlite3.connect('recipes.db')
    cursor = conn.cursor()
    cursor.execute('DELETE FROM favorite_recipes WHERE user_id = ? AND recipe_id = ?', (user_id, recipe_id))
    conn.commit()
    conn.close()
    
    await query.answer("üóëÔ∏è –†–µ—Ü–µ–ø—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")

async def show_recipe_details(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞"""
    recipe_id = query.data.replace("view_recipe_", "")
    user_id = query.from_user.id
    
    try:
        response = requests.get(f"https://www.themealdb.com/api/json/v1/1/lookup.php?i={recipe_id}")
        recipe_data = response.json()
        
        if recipe_data['meals']:
            recipe = recipe_data['meals'][0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
            conn = sqlite3.connect('recipes.db')
            cursor = conn.cursor()
            cursor.execute('SELECT 1, rating FROM favorite_recipes WHERE user_id = ? AND recipe_id = ?', (user_id, recipe_id))
            result = cursor.fetchone()
            is_favorite = result is not None
            current_rating = result[1] if result else 0
            conn.close()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞
            text = f"üç≥ **{recipe['strMeal']}**\n\n"
            text += f"üìã **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {recipe['strCategory']}\n"
            text += f"üåç **–ö—É—Ö–Ω—è:** {recipe['strArea']}\n"
            
            if is_favorite and current_rating > 0:
                stars = "‚≠ê" * current_rating
                text += f"‚≠ê **–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥:** {stars}\n"
            
            text += f"\nüìã **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n"
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
            ingredients = []
            for i in range(1, 21):
                ingredient = recipe[f'strIngredient{i}']
                measure = recipe[f'strMeasure{i}']
                if ingredient and ingredient.strip():
                    ingredients.append(f"‚Ä¢ {measure} {ingredient}")
            
            text += "\n".join(ingredients[:10])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            text += "\n\nüìù **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
            text += recipe['strInstructions'][:500] + "..." if len(recipe['strInstructions']) > 500 else recipe['strInstructions']
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
            if recipe['strYoutube'] and recipe['strYoutube'].strip():
                text += f"\n\nüé• **–í–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç:**\n"
                text += f"üì∫ {recipe['strYoutube']}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = []
            if is_favorite:
                keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"remove_favorite_{recipe_id}")])
                keyboard.append([InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data=f"rate_recipe_{recipe_id}")])
            else:
                keyboard.append([InlineKeyboardButton("‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_favorite_{recipe_id}")])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if recipe['strYoutube'] and recipe['strYoutube'].strip():
                keyboard.append([InlineKeyboardButton("üé• –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç", url=recipe['strYoutube'])])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await query.answer("‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API TheMealDB

async def show_random_recipe(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç"""
    try:
        response = requests.get("https://www.themealdb.com/api/json/v1/1/random.php")
        recipe_data = response.json()
        
        if recipe_data['meals']:
            recipe = recipe_data['meals'][0]
            recipe_id = recipe['idMeal']
            recipe_name = recipe['strMeal']
            recipe_image = recipe['strMealThumb']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
            user_id = query.from_user.id
            conn = sqlite3.connect('recipes.db')
            cursor = conn.cursor()
            cursor.execute('SELECT 1, rating FROM favorite_recipes WHERE user_id = ? AND recipe_id = ?', (user_id, recipe_id))
            result = cursor.fetchone()
            is_favorite = result is not None
            current_rating = result[1] if result else 0
            conn.close()
            
            text = f"üé≤ **–°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç:**\n\n"
            text += f"üç≥ **{recipe_name}**\n\n"
            text += f"üìã **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {recipe['strCategory']}\n"
            text += f"üåç **–ö—É—Ö–Ω—è:** {recipe['strArea']}\n\n"
            text += f"üìù **–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:**\n"
            text += recipe['strInstructions'][:200] + "..." if len(recipe['strInstructions']) > 200 else recipe['strInstructions']
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
            if recipe['strYoutube'] and recipe['strYoutube'].strip():
                text += f"\n\nüé• **–í–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç:**\n"
                text += f"üì∫ {recipe['strYoutube']}"
            
            keyboard = []
            if is_favorite:
                keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"remove_favorite_{recipe_id}")])
            else:
                keyboard.append([InlineKeyboardButton("‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_favorite_{recipe_id}")])
            
            keyboard.append([InlineKeyboardButton("üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"view_recipe_{recipe_id}")])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if recipe['strYoutube'] and recipe['strYoutube'].strip():
                keyboard.append([InlineKeyboardButton("üé• –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç", url=recipe['strYoutube'])])
            
            keyboard.append([InlineKeyboardButton("üé≤ –î—Ä—É–≥–æ–π —Ä–µ—Ü–µ–ø—Ç", callback_data="random_recipe")])
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="search_recipes")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞")

async def show_search_by_name_prompt(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="search_recipes")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üìù **–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: chicken, pasta, cake\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def show_categories_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        response = requests.get("https://www.themealdb.com/api/json/v1/1/categories.php")
        categories_data = response.json()
        
        if categories_data['categories']:
            keyboard = []
            categories = categories_data['categories']
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Ä—è–¥
            for i in range(0, len(categories), 2):
                row = []
                row.append(InlineKeyboardButton(
                    categories[i]['strCategory'], 
                    callback_data=f"category_{categories[i]['strCategory']}"
                ))
                
                if i + 1 < len(categories):
                    row.append(InlineKeyboardButton(
                        categories[i + 1]['strCategory'], 
                        callback_data=f"category_{categories[i + 1]['strCategory']}"
                    ))
                
                keyboard.append(row)
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="search_recipes")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

async def show_recipes_by_category(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = query.data.replace("category_", "")
    
    try:
        response = requests.get(f"https://www.themealdb.com/api/json/v1/1/filter.php?c={category}")
        recipes_data = response.json()
        
        if recipes_data['meals']:
            recipes = recipes_data['meals']
            text = f"üìÇ **–†–µ—Ü–µ–ø—Ç—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':**\n\n"
            keyboard = []
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ä–µ—Ü–µ–ø—Ç–æ–≤
            for i, recipe in enumerate(recipes[:10]):
                text += f"{i+1}. {recipe['strMeal']}\n"
                keyboard.append([
                    InlineKeyboardButton(
                        f"üëÅÔ∏è {recipe['strMeal'][:25]}...", 
                        callback_data=f"select_recipe_{recipe['idMeal']}"
                    )
                ])
            
            if len(recipes) > 10:
                text += f"\n... –∏ –µ—â–µ {len(recipes) - 10} —Ä–µ—Ü–µ–ø—Ç–æ–≤"
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="search_by_category")])
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="search_by_category")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"‚ùå **–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
                f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤.",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤")

async def show_recipe_details_by_id(query, recipe_id):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ ID"""
    user_id = query.from_user.id
    
    try:
        response = requests.get(f"https://www.themealdb.com/api/json/v1/1/lookup.php?i={recipe_id}")
        recipe_data = response.json()
        
        if recipe_data['meals']:
            recipe = recipe_data['meals'][0]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
            conn = sqlite3.connect('recipes.db')
            cursor = conn.cursor()
            cursor.execute('SELECT 1, rating FROM favorite_recipes WHERE user_id = ? AND recipe_id = ?', (user_id, recipe_id))
            result = cursor.fetchone()
            is_favorite = result is not None
            current_rating = result[1] if result else 0
            conn.close()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–µ—Ü–µ–ø—Ç–∞
            text = f"üç≥ **{recipe['strMeal']}**\n\n"
            text += f"üìã **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {recipe['strCategory']}\n"
            text += f"üåç **–ö—É—Ö–Ω—è:** {recipe['strArea']}\n"
            
            if is_favorite and current_rating > 0:
                stars = "‚≠ê" * current_rating
                text += f"‚≠ê **–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥:** {stars}\n"
            
            text += f"\nüìã **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n"
            
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
            ingredients = []
            for i in range(1, 21):
                ingredient = recipe[f'strIngredient{i}']
                measure = recipe[f'strMeasure{i}']
                if ingredient and ingredient.strip():
                    ingredients.append(f"‚Ä¢ {measure} {ingredient}")
            
            text += "\n".join(ingredients[:10])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            text += "\n\nüìù **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**\n"
            text += recipe['strInstructions'][:500] + "..." if len(recipe['strInstructions']) > 500 else recipe['strInstructions']
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
            if recipe['strYoutube'] and recipe['strYoutube'].strip():
                text += f"\n\nüé• **–í–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç:**\n"
                text += f"üì∫ {recipe['strYoutube']}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = []
            if is_favorite:
                keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"remove_favorite_{recipe_id}")])
                keyboard.append([InlineKeyboardButton("‚≠ê –û—Ü–µ–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç", callback_data=f"rate_recipe_{recipe_id}")])
            else:
                keyboard.append([InlineKeyboardButton("‚ù§Ô∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_favorite_{recipe_id}")])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if recipe['strYoutube'] and recipe['strYoutube'].strip():
                keyboard.append([InlineKeyboardButton("üé• –°–º–æ—Ç—Ä–µ—Ç—å –≤–∏–¥–µ–æ—Ä–µ—Ü–µ–ø—Ç", url=recipe['strYoutube'])])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await query.answer("‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º

async def show_rating_menu(query):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    recipe_id = query.data.replace("rate_recipe_", "")
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
    conn = sqlite3.connect('recipes.db')
    cursor = conn.cursor()
    cursor.execute('SELECT recipe_name FROM favorite_recipes WHERE user_id = ? AND recipe_id = ?', (user_id, recipe_id))
    result = cursor.fetchone()
    conn.close()
    
    if not result:
        await query.answer("‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")
        return
    
    recipe_name = result[0]
    
    keyboard = [
        [InlineKeyboardButton("‚≠ê", callback_data=f"set_rating_{recipe_id}_1")],
        [InlineKeyboardButton("‚≠ê‚≠ê", callback_data=f"set_rating_{recipe_id}_2")],
        [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data=f"set_rating_{recipe_id}_3")],
        [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"set_rating_{recipe_id}_4")],
        [InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data=f"set_rating_{recipe_id}_5")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ—Ü–µ–ø—Ç—É", callback_data=f"select_recipe_{recipe_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"‚≠ê **–û—Ü–µ–Ω–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç**\n\n"
        f"–†–µ—Ü–µ–ø—Ç: **{recipe_name}**\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –æ—Ç 1 –¥–æ 5:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def set_recipe_rating(query):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Ä–µ—Ü–µ–ø—Ç–∞"""
    try:
        data_parts = query.data.replace("set_rating_", "").split("_")
        if len(data_parts) < 2:
            await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return
            
        recipe_id = data_parts[0]
        rating = int(data_parts[1])
        user_id = query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–π—Ç–∏–Ω–≥ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if rating < 1 or rating > 5:
            await query.answer("‚ùå –û—à–∏–±–∫–∞: —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ –ë–î
        conn = sqlite3.connect('recipes.db')
        cursor = conn.cursor()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ü–µ–ø—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
        cursor.execute('''
            SELECT recipe_name FROM favorite_recipes 
            WHERE user_id = ? AND recipe_id = ?
        ''', (user_id, recipe_id))
        
        result = cursor.fetchone()
        if not result:
            conn.close()
            await query.answer("‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º!")
            return
            
        recipe_name = result[0]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
        cursor.execute('''
            UPDATE favorite_recipes 
            SET rating = ? 
            WHERE user_id = ? AND recipe_id = ?
        ''', (rating, user_id, recipe_id))
        
        conn.commit()
        conn.close()
        
        stars = "‚≠ê" * rating
        await query.answer(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ {stars} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è '{recipe_name}'!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ—Ü–µ–ø—Ç—É
        await show_recipe_details_by_id(query, recipe_id)
            
    except ValueError:
        await query.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    message_type = update.message.chat.type
    text = update.message.text.lower()
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({update.message.chat.id}) –≤ {message_type}: "{text}"')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–æ–≤–æ "–ø—Ä–∏–≤–µ—Ç"
    if "–ø—Ä–∏–≤–µ—Ç" in text:
        user = update.effective_user
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üòä\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é –±–æ—Ç–∞!"
        )
        return
    
    # –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    await search_recipe_by_name(update, text)

async def search_recipe_by_name(update: Update, search_query: str):
    """–ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
    try:
        response = requests.get(f"https://www.themealdb.com/api/json/v1/1/search.php?s={search_query}")
        recipes_data = response.json()
        
        if recipes_data['meals']:
            recipes = recipes_data['meals']
            text = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è '{search_query}':**\n\n"
            keyboard = []
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ—Ü–µ–ø—Ç–æ–≤
            for i, recipe in enumerate(recipes[:5]):
                text += f"{i+1}. {recipe['strMeal']} ({recipe['strCategory']})\n"
                keyboard.append([
                    InlineKeyboardButton(
                        f"üëÅÔ∏è {recipe['strMeal'][:25]}...", 
                        callback_data=f"select_recipe_{recipe['idMeal']}"
                    )
                ])
            
            if len(recipes) > 5:
                text += f"\n... –∏ –µ—â–µ {len(recipes) - 5} —Ä–µ—Ü–µ–ø—Ç–æ–≤"
            
            keyboard.append([InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_by_name")])
            keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            keyboard = [
                [InlineKeyboardButton("üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫", callback_data="search_by_name")],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚ùå **–†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**\n\n"
                f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ –î—Ä—É–≥–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è (chicken, pasta, cake)\n"
                f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è\n"
                f"‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ—Ü–µ–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f'–û—à–∏–±–∫–∞: {context.error}')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
    if BOT_TOKEN == 'YOUR_BOT_TOKEN':
        print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ —Ñ–∞–π–ª–µ config.py")
        print("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª config.py")
        print("3. –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler('start', start_command))
    app.add_handler(CommandHandler('test', test_command))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling(poll_interval=1)

if __name__ == '__main__':
    main() 